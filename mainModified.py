import os
import shutil
import csv
from jsonParser import jsonParser
from testSuiteGeneration_and_Run import testSuiteGeneration_and_Run
from random_priority import Random_Prioritization
from total_priority import Total_Prioritization
from additional_priority import Additional_Prioritization
from exposeFaultsInBenchmarks import testsuite_faultexpose


allBenchmarkFolders = ['printtokens','printtokens2','replace','schedule','schedule2','tcas','totinfo']
twoCoverageCriterias = ['statement','branch']
testCasePrioritizationTechniques = ['random','total','additional']
testsuite = testSuiteGeneration_and_Run
cur_dir = os.getcwd()

def testCaseGeneration_start():
    for benchmark in allBenchmarkFolders:
        test_cases = []
        test_suite_path = os.path.join("../benchmarks",benchmark,'testsuites')
        if os.path.exists(test_suite_path):
            shutil.rmtree(test_suite_path)
        os.makedirs(test_suite_path)
        coverage_path = os.path.join("../benchmarks",benchmark,'coverage')
        parser = jsonParser(benchmark,coverage_path)
        for subdir, dirs, files in os.walk(coverage_path):
            for dir in sorted(dirs,key=int):
                filepath = os.path.join(subdir,dir+"/"+benchmark+".gcov.json")
                test_cases = parser.coverageInfo_parse(dir,filepath)
                
        print('*******End of Test case Generation********')
        print(" ") 
        print("Total number of test cases generated -: ", len(test_cases))
        print(" ") 
        print('*******Start for getting the input Test cases based on Prioritization Techniques and Coverage Criteria********')
    
        for criteria in twoCoverageCriterias:
            selected_inputs = []
            for method in testCasePrioritizationTechniques:
                if method == "random":
                    rp = Random_Prioritization(test_cases,criteria)
                    selected_inputs = rp.coverage()
                elif method == "total":
                    tp = Total_Prioritization(test_cases,criteria)
                    selected_inputs = tp.coverage()
                else:
                    ap = Additional_Prioritization(test_cases, criteria)
                    selected_inputs = ap.coverage()  
                print("BENCHMARK_FOLDER: "+benchmark+", COVERAGE_CRITERIA: "+criteria+", PRIORITIZATION_TECHNIQUE: "+method+", SELECTED_INPUTS: ",len(selected_inputs))           
                testsuite.benchmark_testSuite_dir_creation(benchmark,criteria,method,selected_inputs)
            print("  ")
            print("********END of inputs generated by " +method+ "************")  

def run():
    testCaseGeneration_start()
    # testsuite.run_originaltestsuites(allBenchmarkFolders,twoCoverageCriterias,testCasePrioritizationTechniques)
    # print("done with run - moving to faults exposed")
    # faults_exposed_orginialTestSuite(cur_dir,allBenchmarkFolders,twoCoverageCriterias,testCasePrioritizationTechniques)
    testsuite.run_testsuites(allBenchmarkFolders,twoCoverageCriterias,testCasePrioritizationTechniques)
    testsuite_faultexpose(cur_dir,allBenchmarkFolders,twoCoverageCriterias,testCasePrioritizationTechniques)

if __name__ == "__main__":
    run()
